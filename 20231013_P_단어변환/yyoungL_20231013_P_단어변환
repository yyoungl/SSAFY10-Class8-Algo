import java.util.Arrays;

public class P단어변환 {
	static int N;
	static int answer;
	static boolean answerFlag;
	static int wLen;
	static boolean[][] graph;
	public static void main(String[] args) {
		String b1 = "hit";
		String t1 = "cog";
		String[] w1 = { "hot", "dot", "dog", "lot", "log", "cog" };
		String[] w2 = { "hot", "dot", "dog", "lot", "log" };
		System.out.println(solution(b1, t1, w1)); // 4
		System.out.println(solution(b1, t1, w2)); // 0
	}

	static int solution(String begin, String target, String[] words) {
		// 단어 길이
        N = begin.length();
		// 단어의 개수
        wLen = words.length;
		
        // begin이 배열에 존재하는가? => 그냥 dfs
        // begin이 배열에 존재하지 않는가? => 그렇다면 배열 안에 있는 값으로 바꿀 수 있는가? => 거기서 dfs 시작
		boolean beginChk = false;

        // target이 배열에 있는가? => 말이 안 됨 return 0
        boolean targetChk = false;

        // 하나씩 확인을 해봐요
		for (int i=0; i<wLen; i++) {
			if (begin.equals(words[i])) beginChk = true;
			if (target.equals(words[i])) targetChk = true;
		}
		
        // 말이안됨
		if (!targetChk) return 0;
		
        // 가장 큰 값.. 사실 wLen-1 이 가질 수 있는 가장 큰 값이지만.. 
		answer = wLen;
		graph = new boolean[wLen][wLen];

        // chk 메소드를 이용해서 두 단어끼리 바꿀 수 있는지 없는지 확인하는 배열 만들기
		for (int i = 0; i < wLen; i++) {
			for (int j = 0; j < wLen; j++) {
				if (i == j)
					continue;
				if (chk(words[i], words[j]))
					graph[i][j] = graph[j][i] = true;
			}
		}
		
        // 원활한 계산을 위해 WORDS 배열 내에서 시작값이 어디에 존재하는지 찾아보아요. 
        // 없으면 그대로 0 ... 인데 생각해보니 이거로 boolean 값을 대체해도 됐었구나. -1 로 초기화하고 있는지 없는지 판별해도 되었다. 깨달앗으니 됏다
		int beginIdx = 0;
		int targetIdx = 0;
		for(int i=0; i<wLen; i++) {
			if (words[i].equals(begin)) beginIdx = i;
			if (words[i].equals(target)) targetIdx = i;
		}
        // 방문 체크 배열
		boolean[] visited = new boolean[wLen];
		
        // 만약 시작 단어가 배열에 없다면 있는 것을 찾아서 dfs 돌리기
		if (!beginChk) {
			for (int i=0; i<wLen; i++) {
                // 바꿀 수 있는 단어가 등장한다면 
				if (chk(begin, words[i])) {
                    // depth를 1로 올리고 dfs
					dfs(i, targetIdx, i, 1, words, visited);
				}
			}
		}
		// 그게 아니라면 그냥 dfs를 올린다
		else {
			dfs(beginIdx, targetIdx, beginIdx, 0, words, visited);
		}
		
		if (answer == wLen) return 0;
		return answer;
	}

    // 이건 그냥... 단어 중에 겹치는 글자수를 확인하고 하나만 다르다면 바꿀 수 있는 거니까 true 리턴
	static boolean chk(String s1, String s2) {
		int cnt = 0;
		for (int i = 0; i < N; i++) {
			if (s1.charAt(i) == s2.charAt(i))
				cnt++;
		}
		if (cnt == N - 1)
			return true;
		return false;
	}
	
    // dfs 시작 단어의 위치, 목표 단어의 위치, 현재 단어의 위치, 여태까지 바꾼 횟수, 단어 배열, 방문 체크 배열
	static void dfs(int begin, int target, int curr, int cnt, String[] words, boolean[] visited) {
		// 지금 위치 == 찾으려는 단어의 위치 라면 성공한 거니까 답을 초기화해준다.
        if (curr == target) {
			answer = Math.min(answer, cnt);
			return;
		}

        // 방문한 곳에 다시 왔거나 쓸데없는 행동을 하고 있다 (cnt가 단어의 총 개수보다 크거나 같다) 면 실패!!
		if (cnt >=wLen || visited[curr]) return;

        // 그것도 아니라면 방문 체크 해 주고 다음으로 넘어갈 단어를 탐색한다.
		visited[curr] = true;
		
		for (int i=0; i<wLen; i++) {
            // 나랑 같은 애면 넘기는 거였는데 사실 얘도 필요 없는 코드엿구나 .. 
			if (curr==i) continue;
			if (graph[i][curr] && !visited[i]) {
				
				dfs(begin, target, i, cnt+1, words, visited);
			}
		}
		
	}
}
